import os
from os.path import join

# Config
x = config["x"]

# Paths
RESULTS = config["results"]

# Wildcards
wildcards = config["x"]

wildcard_constraints:
    x = "\w"


# Load helpers (in a directory named as the snakefile)
sys.dont_write_bytecode = True  # Keep directory clean
import snakefile.helpers as hlp

# def logfile(wildcards):
#     """
#     Generate a log file for each rule (via `params`). Because we can
#     only call the rule name inside the shell directive, we need a dummy.

#     Add the following params:
#     params:
#         log = logfile,

#     Add the command below to the end of each `shell` directive:
#     |& tee `echo {params.log} | sed 's/rulename/{rule}/g'`
#     """
#     wcs = [f"{key}-{value}" for key, value in wildcards.items()]
#     wcs = "__".join(wcs)
#     sep = "__" if wcs != "" else ""
#     handle = f"{sep}{wcs}.log".replace("/", "_")
#     logfile = join("logs", "rulename", handle)
#     return logfile

include: "snakefile/rules_XXX.smk"

# Pipeline
rule all:
    input:
        expand(
            join(RESULTS, "{wildcard}.out"), 
            wildcard=x
        ),


rule shell:
    input:
    output:
    params:
        log = logfile,
    threads:
    conda:
        "envs/env.yml",
    shell:
        """
        Rscript \
        |& tee `mkdir -p logs/{rule}; echo {params.log} | \
            sed 's/rulename/{rule}/g'`
        """

rule script:
    input:
    output:
    params:
    threads:
    log:
        log = join(OUTDIR, "logfile.log"),
        debug = join(OUTDIR, "logfile.RData")
    conda:
        "../envs/env.yml",
    script:
        "../../scripts/script.R"